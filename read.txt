环境：
py3_md  py3_env报错(django 版本不同)


用户登陆：

1.  使用Django自带的模板视图 TemplateView.as_view(template_name="login.html") 直接返回静态页面(例如静态首页)
2.  一个html页面,可以通过django自带模板视图类TemplateView 直接返回(静态),也可以使用自定义视图类返回给前端(交互)
3.  表单提交：将一个表单提交到一个Url, input自动以字典形式提交(登陆：get提交到该url--获取页面,用户名密码提交到该url--验证登陆)
4.  身份认证--authenticate--返回user--传入user--登陆login

    默认：使用django自带的user和认证后端
    如果重写了user,添加了字段,则需要配置身份认证模型类
    如果重写了认证后端,添加了认证字段例如电话/邮箱，则需要配置身份认证后端

    身份认证模型类配置  AUTH_USER_MODEL
    身份认证后端配置    AUTHENTICATION_BACKENDS

5.  身份认证后的登陆都是使用django自带的django.contrib.auth.login,传入一个user,该登陆函数本质是将uer用户信息写入session

6.  总结：重写(添加额外字段)/不重写User类----重写(添加验证字段)/不重写authenticate方法
                --user--login--写入session--返回页面(根据request中的信息展示页面)

    so 必要步骤：验证 + login

    登陆验证的两种方式： 常规/自定义表单

7.  python manage.py changepassword klm123 修改密码

8.  底层全局配置： django.conf.global_settings

9.  201810191758 完成登陆注册/找回密码/重置密码/修改密码  没有使用captcha

10. logout需要在settings中指定Login_url,看源码即可知

11. --1.django基于cookie和基于session的状态保持是怎样的
    --2.基于session的状态保持，如果截取到用户的session_id，是否可以伪造登陆
    --3.django的session默认保存在什么地方，如何设置保存在redis或mysql中

12. 使用django自带的验证机制登陆--Authentication,底层状态保持还是使用session
    不使用django自带的验证机制登陆--状态保持使用手动session

13. 使用表单验证提交数据，is_valid 验证成功后，可以使用form.cleaned_data["username"]获取表单中数据
    也可以在request中获取数据 request.POST.get("username")

14. {{ request }}这个变量会被默认传入模板中，可以通过圆点的调用方式，获取它内部的{{ request.session }}，
    再进一步的获取session中的内容。其实{{ request }}中的数据远不止此，例如{{ request.path }}就可以获取先前的url地址。

15. 注册登陆:
        1.可以直接使用或重写再使用 django自带的验证登陆机制：
            重写user---重写authentication
            注册： (View)表单校验--是否注册过--实例化user---make_password()---send_email---active
                  L1:(View)表单校验---authenticate校验---是否active---login(user)
                  L2:(LoginView)表单校验---查询用户模型类---返回页面
        2. 不使用系统自带，完全新定义User模型类
           常规校验 手动session hashlib手动加密
           https://www.cnblogs.com/derek1184405959/p/8567522.html